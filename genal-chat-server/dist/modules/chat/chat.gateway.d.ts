import { Server, Socket } from 'socket.io';
import { Repository } from 'typeorm';
import { User } from '../user/entity/user.entity';
import { Group, GroupMap } from '../group/entity/group.entity';
import { GroupMessage } from '../group/entity/groupMessage.entity';
import { UserMap } from '../friend/entity/friend.entity';
import { FriendMessage } from '../friend/entity/friendMessage.entity';
export declare class ChatGateway {
    private readonly userRepository;
    private readonly groupRepository;
    private readonly groupUserRepository;
    private readonly groupMessageRepository;
    private readonly friendRepository;
    private readonly friendMessageRepository;
    constructor(userRepository: Repository<User>, groupRepository: Repository<Group>, groupUserRepository: Repository<GroupMap>, groupMessageRepository: Repository<GroupMessage>, friendRepository: Repository<UserMap>, friendMessageRepository: Repository<FriendMessage>);
    server: Server;
    defaultGroup: string;
    handleConnection(client: Socket): Promise<string>;
    handleDisconnect(): Promise<any>;
    addGroup(client: Socket, data: Group): Promise<any>;
    joinGroup(client: Socket, data: GroupMap): Promise<any>;
    joinGroupSocket(client: Socket, data: GroupMap): Promise<any>;
    sendGroupMessage(data: GroupMessageDto): Promise<any>;
    addFriend(client: Socket, data: UserMap): Promise<any>;
    joinFriend(client: Socket, data: UserMap): Promise<any>;
    friendMessage(client: Socket, data: FriendMessageDto): Promise<any>;
    getAllData(client: Socket, user: User): Promise<any>;
    exitGroup(client: Socket, groupMap: GroupMap): Promise<any>;
    exitFriend(client: Socket, userMap: UserMap): Promise<any>;
    getActiveGroupUser(): Promise<void>;
}
